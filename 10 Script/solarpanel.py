# -*- coding: utf-8 -*-
"""SolarPanal

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CrlD9lFGzI_APWaIg_O2m1z-GAxxlL8D
"""

# Loading libraries
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
from sklearn.metrics import confusion_matrix
import seaborn as sns
import pandas as pd
from torch import optim
from torch.optim import lr_scheduler 
import pandas as pd
import os
from skimage import io

# Creating class to import images and csv labels
class CustomData():
  def __init__(self, csv_file, root_dir, transform = None):
    self.annotations = pd.read_csv(csv_file)
    self.root_dir = root_dir
    self.transform = transform
    
  def __len__(self):
    return len(self.annotations)

  def __getitem__ (self, index):
    img_path = os.path.join(self.root_dir, self.annotations.iloc[index, 0])
    image = io.imread(img_path)
    y_label = torch.tensor(int(self.annotations.iloc[index, 1]))

    if self.transform:
      image = self.transform(image)

    return(image, y_label)

# Creating paramters
num_classes = 2
batch_size = 150
learning_rate = 0.04
num_epochs = 25

# Transforms
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
     #transforms.RandomHorizontalFlip(),
     
     ]
)

# Actually importing images and labels
dataset = CustomData(csv_file='../content/labels_training.csv', root_dir='../content/training', transform=transform)
train_set, valid_set = torch.utils.data.random_split(dataset, [1200, 300])

train_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle = True)
valid_loader = torch.utils.data.DataLoader(dataset=valid_set, batch_size=batch_size, shuffle = True)

images, labels = iter(train_loader).next()
print(images.shape, labels.shape)

# Actual labels
classes = ('No Panel', 'Panel')

# Displaying images
for i in range(10):
  plt.subplot(2,5,i+1)
  plt.imshow(images[i][0])
  plt.title('{}'.format(classes[labels[i]]))
  plt.show

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
    
        self.conv_layer = nn.Sequential(
            # Conv layer 1
            nn.Conv2d(in_channels=3, out_channels=32, kernel_size=2, padding=0), # 101 > 100
            nn.BatchNorm2d(32),
            nn.ReLU(inplace = True),
            nn.MaxPool2d(2,2), # 100 > 50

            # Conv layer 2
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1), # 50 > 50
            nn.BatchNorm2d(64),
            nn.ReLU(inplace = True),
            nn.MaxPool2d(2,2), # 50 > 25

            # Conv layer 3
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=2, padding = 0), # 25 > 24
            nn.BatchNorm2d(128),
            nn.ReLU(inplace = True),
            nn.MaxPool2d(2,2), # 24 > 12

            # Conv layer 4
            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding = 0), # 12 > 10
            nn.BatchNorm2d(256),
            nn.ReLU(inplace = True),
            nn.MaxPool2d(2,2), # 10 > 5
        )

        self.fc_layer = nn.Sequential(
            # Linear layer 1
            nn.Linear(in_features=256*5*5, out_features=120),
            nn.Dropout(0.5, inplace=True),
            nn.BatchNorm1d(120),
            nn.ReLU(inplace = True),

            # Linear layer 2
            nn.Linear(in_features=120, out_features=40),
            nn.Dropout(0.2, inplace=True),
            nn.BatchNorm1d(40),
            nn.ReLU(inplace = True),

            # Linear layer 3
            nn.Linear(in_features=40, out_features=2)
        )

    def forward(self, x):
      # conv layers
      x = self.conv_layer(x)
          
      # flatten
      x = x.view(x.size(0), -1)
          
      # fc layer
      x = self.fc_layer(x)

      return x

# Image output caclulation
W = 12
K = 3
P = 0
S = 1

((W-K+2*P)/S)+1

# Creating valdation funciton
def validate():
    with torch.no_grad():
      val_n_correct = 0
      val_n_samples = 0

      val_images, val_labels = next(iter(valid_loader))
      val_outputs = model(val_images)
      val_loss = criterion(val_outputs, val_labels)
      # max returns (value ,index)
      _, val_predicted = torch.max(val_outputs, 1)
      val_n_samples += val_labels.size(0)
      val_n_correct += (val_predicted == val_labels).sum().item()

      return val_loss, (val_n_correct/val_n_samples)

model = ConvNet()

# Choosing loss function
criterion = nn.CrossEntropyLoss()

# Choosing optimizer
#optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=0.90) 

# Setting up learning rate scheduler
sched = lr_scheduler.StepLR(optimizer, step_size = 5, gamma = 0.1)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
device

# Traning model
n_total_steps = len(train_loader)
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        
        
        images = images
        labels = labels
        

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        # Print train and validation figures
        if (i+1) % 2 == 0:
          val_loss, val_acc = validate()
          print (f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{n_total_steps}], Train Loss: {loss.item():.4f}, Val Loss:{val_loss:.4f}, Val Acc:{val_acc:.4f}')

    sched.step()

# Testing the model
with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(num_classes)]
    n_class_samples = [0 for i in range(num_classes)]
    all_pred = []
    all_true = []

    for images, labels in valid_loader:
        images = images
        labels = labels
        outputs = model(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(batch_size):
            label = labels[i]
            pred = predicted[i]
            all_pred.append(pred)
            all_true.append(label)
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1

    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(num_classes):
        acc = 100.0 * int(n_class_correct[i]) / int(n_class_samples[i])
        print(f'Accuracy of {classes[i]}: {acc} %')

# Combining actual and preds together
a = torch.tensor(all_true)
b = torch.stack(all_pred)
stacked = torch.stack((a,b), dim =1 )

# Building confusion matrix
cm = confusion_matrix(a,b)
cm

# Displaying confusion matrix
df_cm = pd.DataFrame(cm, index = [i for i in classes ],
                  columns = [i for i in classes])
plt.figure(figsize = (12,12))
sns.heatmap(df_cm, annot=True, cmap="Blues", fmt = 'g', cbar = False)

(187+80)/(187+80+14+19)